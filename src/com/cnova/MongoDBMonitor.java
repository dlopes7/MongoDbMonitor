
 /**
  * This template file was generated by dynaTrace client.
  * The dynaTrace community portal can be found here: http://community.compuwareapm.com/
  * For information how to publish a plugin please visit http://community.compuwareapm.com/plugins/contribute/
  **/ 

package com.cnova;


import com.cnova.stats.DatabaseStats;
import com.cnova.stats.ServerStats;
import com.dynatrace.diagnostics.pdk.*;
import com.mongodb.DB;
import com.mongodb.MongoClient;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.OutputStreamWriter;
import java.text.DecimalFormat;
import java.util.Collection;
import java.util.HashMap;

import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.json.JSONArray;
import org.json.JSONObject;


public class MongoDBMonitor implements Monitor {

	private static final Logger log = Logger.getLogger(MongoDBMonitor.class.getName());

	private static final String CONFIG_PORT = "port";
	private static final String CONFIG_USERNAME = "user";
	private static final String CONFIG_PASSWORD = "password";

	
	private Map<String, Double> MSR_SERVER = new HashMap<String, Double>();
	private Map<String, Double> MSR_DATABASE = new HashMap<String, Double>();

	
	private MongoClient mongoClient;
	private String user;
	private String pass;
	private String host;
	private int port;
	Connection connectionAdmin = null;
	
	@Override
	public Status setup(MonitorEnvironment env) throws Exception {

		return new Status(Status.StatusCode.Success);
	}


	@Override
	public Status execute(MonitorEnvironment env) throws Exception {
		
		user = env.getConfigString(CONFIG_USERNAME);
		pass = env.getConfigPassword(CONFIG_PASSWORD);
		host = env.getHost().getAddress();
		port = Integer.parseInt(String.valueOf(env.getConfigLong(CONFIG_PORT)));
		
		log.warning("Connecting to mongo on " + env.getHost().getAddress() );
		connectionAdmin = new Connection(host, port, user, pass, "admin");
		DB db = connectionAdmin.connectToAdminDB(); 

		
		//Executes "serverStatus" on the Mongo server
		JSONObject resultadoServerStatus = new JSONObject(db.command("serverStatus"));
		ServerStats serverStats = new ServerStats();
		serverStats.populateMetrics(resultadoServerStatus);
		
		//Populate the map with the values
		MSR_SERVER.put("Current Connections", serverStats.getCurrentConnections());
		MSR_SERVER.put("Available Connections", serverStats.getAvailableConnections());
		MSR_SERVER.put("Total Created", serverStats.getTotalCreatedConnections());
		
		MSR_SERVER.put("Resident", serverStats.getResidentMemory());
		MSR_SERVER.put("Virtual", serverStats.getVirtualMemory());
		MSR_SERVER.put("Mapped", serverStats.getMappedMemory());
		MSR_SERVER.put("Mapped With Journal", serverStats.getMappedWithJournalMemory());
		
		MSR_SERVER.put("Insert", serverStats.getInsertOperations());
		MSR_SERVER.put("Query", serverStats.getQueryOperations());
		MSR_SERVER.put("Update", serverStats.getUpdateOperations());
		MSR_SERVER.put("Delete", serverStats.getDeleteOperations());
		MSR_SERVER.put("Get More", serverStats.getGetmoreOperations());
		MSR_SERVER.put("Command", serverStats.getCommandOperations());
		
		MSR_SERVER.put("Insert Replications", serverStats.getInsertReplications());
		MSR_SERVER.put("Query Replications", serverStats.getQueryReplications());
		MSR_SERVER.put("Update Replications", serverStats.getUpdateReplications());
		MSR_SERVER.put("Delete Replications", serverStats.getDeleteReplications());
		MSR_SERVER.put("Get More Replications", serverStats.getGetmoreReplications());
		MSR_SERVER.put("Command Replications", serverStats.getCommandReplications());
		
		MSR_SERVER.put("Bytes In", serverStats.getBytesIn());
		MSR_SERVER.put("Bytes Out", serverStats.getBytesOut());
		MSR_SERVER.put("Requests", serverStats.getNumRequests());
		
		//Executes "dbStats" on the Mongo server
		JSONObject resultadoDBStats = new JSONObject(db.command("dbStats"));
		DatabaseStats databaseStats = new DatabaseStats();
		databaseStats.populateMetrics(resultadoDBStats);
		
		//Populate the Database Metrics
		MSR_DATABASE.put("Collections", databaseStats.getCollections());
		MSR_DATABASE.put("Objects", databaseStats.getObjects());
		MSR_DATABASE.put("Data Size", databaseStats.getDataSize());
		MSR_DATABASE.put("Storage Size", databaseStats.getStorageSize());
		MSR_DATABASE.put("Extents", databaseStats.getNumExtents());
		MSR_DATABASE.put("Indexes", databaseStats.getIndexes());
		MSR_DATABASE.put("Index Size", databaseStats.getIndexSize());
		MSR_DATABASE.put("File Size", databaseStats.getFileSize());
		MSR_DATABASE.put("Namespace Size MB", databaseStats.getNsSizeMB());
		
		//Execute "replSetGetStatus" on the Mongo Server
		//There is no need to create a Class just for this, we will only get ONE metric out of it.
		//The metric is the State of the Mongo Replica Set
		JSONObject replicaSetStats = new JSONObject(db.command("replSetGetStatus"));
		

		Collection<MonitorMeasure> measures = env.getMonitorMeasures();
			for (MonitorMeasure monitorMeasure : measures) {
				
				String nomeMeasure = monitorMeasure.getMeasureName();
				String nomeGrupo = monitorMeasure.getMetricGroupName();
				Double valorAtual = 0.0;
				
				log.warning("Trying to get: " + nomeGrupo + " - " + nomeMeasure );

				
				try{
				if(nomeGrupo.equals("Replication Operations") ||
						nomeGrupo.equals("Operations") ){
					
					//Little aux variable to help identify "REPLICATION" vs "OPERATION"
					String extra = "";
					
					if (nomeGrupo.equals("Replication Operations")){
						extra = "_REPL";
					}

					valorAtual = calculateDifference(nomeMeasure, MSR_SERVER.get(nomeMeasure), host+extra);
					monitorMeasure.setValue(valorAtual);

				}
				else if (nomeGrupo.equals("Database Status")){	
					valorAtual = MSR_DATABASE.get(nomeMeasure);
					monitorMeasure.setValue(valorAtual);
					
				}
				
				//Replica Set Status
				else if (nomeGrupo.equals("Replica Set Status")){	
					
					valorAtual = Double.valueOf(getReplicaSetState(host, replicaSetStats));
					monitorMeasure.setValue(valorAtual);
				}
				
				else{
					
					valorAtual = MSR_SERVER.get(monitorMeasure.getMeasureName());
					monitorMeasure.setValue(valorAtual);
					
				}
				
				}catch(Exception e){
					log.severe("Issue setting Metrics - " + e.getMessage());
					throw e;
				}
				//log.warning("Setting: " + nomeGrupo + " - "+ nomeMeasure + " to: " + valorAtual);
		
		}
		
		connectionAdmin.closeConnection();
		return new Status(Status.StatusCode.Success);
	}

		@Override
	public void teardown(MonitorEnvironment env) throws Exception {
		 if (mongoClient != null) {
             mongoClient.close();
         }
	}

    public double calculateDifference(String metric, double current, String identifier) throws Exception{
    	
    	//Dealing with CUMULATIVE METRICS
    	File yourFile = new File(metric +"_"+ identifier + ".txt");
    	double actual = 0;
    	double previous = 0;
    	long unsignedPrevious;
    	boolean isUnsigned = false;
    	DecimalFormat format = new DecimalFormat();
    	format.setDecimalSeparatorAlwaysShown(false);
    	
    	
		try{
			if(!yourFile.exists()) {
			    yourFile.createNewFile();
			} 
			BufferedReader leitura = new BufferedReader(new FileReader(yourFile));
			
			String valorArquivo = leitura.readLine();


			
			if(valorArquivo != null){
				if (valorArquivo.charAt(0) == '-'){
					isUnsigned = true;
				}
				try {
					if (isUnsigned){
						unsignedPrevious = Integer.parseInt(valorArquivo) & 0x00000000ffffffffL;
						previous = unsignedPrevious;
						
					}
					else{
						previous = Double.valueOf(valorArquivo);
					}
	
					
				} catch (Exception e) {
					if (connectionAdmin != null){
						connectionAdmin.closeConnection();
					}
					previous = current;
					log.severe(host + " ERRO no calculo de diferenca! " + metric + " " + identifier);
					
					log.log(Level.SEVERE, e.getMessage(), e);
					e.printStackTrace();
					leitura.close();
					throw e;
				}

			}else{
				previous = current;
				
			}
			
			if (current >= previous){
				actual = current - previous;
			}else{
				//Algo errado aqui, o valor atual é menor que o anterior, descarto o ponto
				actual = 0;
			}


			leitura.close();
			
			FileOutputStream oFile = new FileOutputStream(yourFile, false); 
			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(oFile));
			
			String valorASerEscrito = format.format(current).replace(",", "");
			bw.write(valorASerEscrito);
			bw.close();
			
		}catch (Exception e){
			if (connectionAdmin != null){
				connectionAdmin.closeConnection();
			}
			e.printStackTrace();
			log.severe("\nPREVIOUS: " + previous +" \nCURRENT: " +current+ "\nACTUAL: " + actual );
			log.severe(host);
			log.log(Level.SEVERE, e.getMessage(), e);
			throw e;
			
		}
		return actual;
    }
    
    public int getReplicaSetState(String host, JSONObject replicaSetJson){
    	String nome;
    	int status = -1;
    	
    	JSONArray membrosReplicaSet = replicaSetJson.getJSONArray("members");
    	
    	for (int i = 0; i < membrosReplicaSet.length(); i++){
    		
			nome = membrosReplicaSet.getJSONObject(i).getString("name");
			
			if (nome.toLowerCase().contains(host.toLowerCase())){
				status =  membrosReplicaSet.getJSONObject(i).getInt("state");
				log.warning("Host: " + nome + ": " + status);
				return status;
				
			}
			
		}
    	if (status != -1){
    		return status;
    	}else{
    		// 6 = Status UNKNOWN
    		return 6;
    	}
    	
    }
    
}
